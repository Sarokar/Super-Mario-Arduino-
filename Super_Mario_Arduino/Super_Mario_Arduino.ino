#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

// Declare LCD object for software SPI
// Adafruit_PCD8544(CLK,DIN,D/C,CE,RST);
Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);

//mario position
unsigned long playerX;
unsigned long playerY;

unsigned char i;


const unsigned char Mario [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xf8, 0x93, 0x0c, 0x61, 0xff, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xf3, 0x93, 0x24, 0xe4, 0xff, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xf1, 0x93, 0x24, 0xe4, 0xff, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xf8, 0x93, 0x0c, 0x61, 0xff, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xfc, 0x93, 0x3c, 0xe1, 0xff, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xfc, 0x93, 0x3c, 0xe4, 0xff, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xf1, 0xc7, 0x3c, 0x64, 0xff, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0xce, 0x07, 0x8f, 0xe7, 0xe3, 0xcf, 0x7b, 0x9c, 0x3e, 0x00, 
    0x03, 0xcf, 0x07, 0x8f, 0xf7, 0xf3, 0xcf, 0x7b, 0x9c, 0xfe, 0x00, 
    0x03, 0xff, 0x0f, 0x8f, 0xf7, 0xfb, 0xcf, 0x7b, 0x9d, 0xff, 0x00, 
    0x07, 0xff, 0x1c, 0xce, 0x77, 0x3b, 0xcf, 0x7b, 0xdd, 0xe7, 0x80, 
    0x07, 0xff, 0x9c, 0xce, 0x77, 0x3b, 0xcf, 0x7b, 0xfd, 0xc3, 0x80, 
    0x0f, 0x77, 0xbf, 0xee, 0x77, 0x3b, 0xcf, 0x7b, 0xfd, 0xc3, 0x80, 
    0x1f, 0x27, 0x8f, 0xe7, 0xe7, 0x3b, 0xcf, 0x7b, 0xbd, 0xe7, 0x80, 
    0x1e, 0x53, 0xef, 0xf7, 0xf7, 0xfb, 0xff, 0x7b, 0x9c, 0xff, 0x80, 
    0x3e, 0xab, 0xe8, 0xf7, 0x77, 0xf9, 0xfe, 0x7b, 0x9d, 0x7f, 0x00, 
    0x0d, 0x0b, 0xe6, 0xe7, 0x3b, 0xe2, 0xfd, 0x7b, 0x9c, 0xb8, 0x80, 
    0x22, 0x04, 0x09, 0x10, 0x44, 0x19, 0x02, 0x00, 0x60, 0x47, 0x00, 
    0x1c, 0x03, 0xe0, 0xe7, 0xbb, 0xe0, 0xfc, 0x7b, 0x9c, 0x38, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

typedef struct task {
  int state;
  unsigned long period;
  unsigned long elapsedTime;
  int (*TickFct)(int);
} task;

const unsigned short tasksNum = 1;
task tasks[tasksNum];

enum Player_States {Player_init,Player_draw,Player_movement};
int TickFct_Player(int state) { 
  switch(state) {
    case Player_init:
    break;

    case Player_draw:
    break;

    case Player_movement:
      //todo: input controls
    break;

    default:
    break;
    }

  switch(state) {
    case Player_init:
      //default position left of the screen
      playerX = 0;
      playerY = 8;

      state = Player_draw;
    break;

    case Player_draw:
      display.drawBitmap(playerX, playerY,  Mario, 16, 16, BLACK);
      display.display();
      state = Player_movement;
    break;

    default:
    break;
    }

    return state;
}
 

    
  


void setup() {

  
  i = 0;
  tasks[i].state = Player_init;
  tasks[i].period = 200;
  tasks[i].elapsedTime = 0;
  tasks[i].TickFct = &TickFct_Player; 
  
  // Print a message to the LCD.
  //lcd.print("hello, world!");
}

void loop() {
  // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  // print the number of seconds since reset:
  
  for (i = 0; i < tasksNum; ++i) {
    if ( (millis() - tasks[i].elapsedTime) >= tasks[i].period) {
        tasks[i].state = tasks[i].TickFct(tasks[i].state);
        tasks[i].elapsedTime = millis(); // Last time this task was ran
    }
  }
  delay(200);
}
